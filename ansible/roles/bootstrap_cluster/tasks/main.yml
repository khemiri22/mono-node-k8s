---
- name: Init k8s cluster
  ansible.builtin.command: >
    kubeadm init 
      --pod-network-cidr=10.10.0.0/16
      --service-cidr=10.100.0.0/16
      --apiserver-advertise-address={{ mono_ip }}
  args:
    creates: /etc/kubernetes/admin.conf
  register: kubeadm_init

- name: Set Kubelet node IP
  ansible.builtin.lineinfile:
    path: /var/lib/kubelet/kubeadm-flags.env
    regexp: '(^KUBELET_KUBEADM_ARGS=.*)"'
    line: '\1 --node-ip={{ mono_ip }}"'
    backrefs: yes
  notify: Restart kubelet to apply new node IP

# Run notified handlers immediately
- name: Run notified handlers immediately
  ansible.builtin.meta: flush_handlers

- name: Ensure .kube directory exists
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy kubeconfig to user home
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Remove control-plane taint from all nodes # To allow scheduling of pods on control-plane nodes
  ansible.builtin.shell: |
    kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
    kubectl taint nodes --all node-role.kubernetes.io/master- || true
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Setup Calico CNI
- name: Download Calico manifest 
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/projectcalico/calico/v3.28.5/manifests/calico.yaml
    dest: /tmp/calico.yaml
    mode: '0644'

- name: Uncomment CALICO_IPV4POOL_CIDR (- name line)
  ansible.builtin.replace:
    path: /tmp/calico.yaml
    regexp: '^(\s*)#\s- name: CALICO_IPV4POOL_CIDR'
    replace: '\1- name: CALICO_IPV4POOL_CIDR'

- name: Uncomment CALICO_IPV4POOL_CIDR (value) and change CIDR from "192.168.0.0/16" to "10.10.0.0/16"
  ansible.builtin.replace:
    path: /tmp/calico.yaml
    regexp: '^(\s*)#\s(\s{2})value: "192.168.0.0/16"'
    replace: '\1\2value: "10.10.0.0/16"'

- name: Apply Calico manifest with IPIP change
  ansible.builtin.command: >
    kubectl apply -f /tmp/calico.yaml
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Install Local Path Provisioner
- name: Install Local Path Provisioner
  ansible.builtin.command: >
    kubectl apply -f 
      https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

- name: Set local-path as default storage class
  ansible.builtin.command: >
    kubectl patch storageclass local-path 
      -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Install Ingress-Nginx 
- name: Install Ingress-Nginx
  ansible.builtin.command: >
    kubectl apply -f 
      https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.13.1/deploy/static/provider/baremetal/deploy.yaml
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Make ingress nginx the default ingress class
- name: Make ingress nginx the default ingress class
  ansible.builtin.command: >
    kubectl patch ingressclass nginx 
      -p '{"metadata": {"annotations": {"ingressclass.kubernetes.io/is-default-class": "true"}}}'
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Make ingress-nginx-service a ClusterIP service
- name: Make ingress-nginx-service a ClusterIP service
  ansible.builtin.command: >
    kubectl patch svc ingress-nginx-controller -n ingress-nginx 
      -p '{"spec": {"type": "ClusterIP", "ports": [{"port": 80, "targetPort": 80}, {"port": 443, "targetPort": 443}]}}'
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Add hostPort to ingress-nginx-controller pod template
- name: Add hostPort to ingress-nginx-controller pod template
  ansible.builtin.command: >
    kubectl patch deployment ingress-nginx-controller -n ingress-nginx 
      --type='json' 
      -p='[
        {"op": "add", "path": "/spec/template/spec/containers/0/ports/0/hostPort", "value": 80},
        {"op": "add", "path": "/spec/template/spec/containers/0/ports/1/hostPort", "value": 443}
      ]'
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

# Copy kubeconfig to local machine
- name: Fetch kubeconfig to local machine
  ansible.builtin.fetch:
    src: /etc/kubernetes/admin.conf    # remote path
    dest: ~/kubeconfig                 # local path relative to your playbook
    flat: yes

